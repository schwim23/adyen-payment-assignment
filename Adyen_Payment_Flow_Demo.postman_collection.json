{
	"info": {
		"_postman_id": "adyen-payment-flow-demo",
		"name": "Adyen Payment Flow Demo",
		"description": "Complete Adyen payment flow demonstration including authorization, capture, refund, and recurring payments. This collection demonstrates the 4-step payment process with configurable parameters and no client-side validation.\n\n**Setup Instructions:**\n1. Import this collection into Postman\n2. Configure the collection variables with your Adyen credentials\n3. Run requests in sequence: Authorize ‚Üí Capture ‚Üí Refund ‚Üí Recurring\n4. Variables are automatically extracted and passed between requests\n\n**‚ö†Ô∏è Demo Collection Notice**: This collection passes all parameters directly to Adyen API with no validation to showcase API error handling behavior.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "adyen-demo"
	},
	"item": [
		{
			"name": "1. Authorize Payment & Tokenize Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract data from authorization response for subsequent requests",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.success && responseJson.data) {",
							"        const data = responseJson.data;",
							"        ",
							"        // Store PSP Reference for capture/refund",
							"        if (data.pspReference) {",
							"            pm.collectionVariables.set('psp_reference', data.pspReference);",
							"            console.log('‚úÖ Stored PSP Reference:', data.pspReference);",
							"        }",
							"        ",
							"        // Store recurring detail reference",
							"        let recurringDetailRef = data.recurringDetailReference;",
							"        if (!recurringDetailRef && data.additionalData) {",
							"            recurringDetailRef = data.additionalData['recurring.recurringDetailReference'];",
							"        }",
							"        if (!recurringDetailRef) {",
							"            recurringDetailRef = data.pspReference; // Fallback",
							"        }",
							"        pm.collectionVariables.set('recurring_detail_reference', recurringDetailRef);",
							"        console.log('‚úÖ Stored Recurring Detail Reference:', recurringDetailRef);",
							"        ",
							"        // Store shopper reference and payment reference",
							"        if (data.shopperReference) {",
							"            pm.collectionVariables.set('shopper_reference', data.shopperReference);",
							"            console.log('‚úÖ Stored Shopper Reference:', data.shopperReference);",
							"        }",
							"        if (data.reference) {",
							"            pm.collectionVariables.set('payment_reference', data.reference);",
							"            console.log('‚úÖ Stored Payment Reference:', data.reference);",
							"        }",
							"        ",
							"        // Log authorization success",
							"        if (data.resultCode === 'Authorised') {",
							"            console.log('üéâ Authorization successful! Ready for capture.');",
							"        }",
							"    }",
							"} else {",
							"    console.log('‚ùå Authorization failed. Check request parameters and credentials.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fullName\": \"{{cardholder_name}}\",\n    \"authAmount\": {{auth_amount}},\n    \"cardNumber\": \"{{card_number}}\",\n    \"cvc\": \"{{cvc}}\",\n    \"expiryMonth\": \"{{expiry_month}}\",\n    \"expiryYear\": \"{{expiry_year}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{flask_base_url}}/api/authorize",
					"host": [
						"{{flask_base_url}}"
					],
					"path": [
						"api",
						"authorize"
					]
				},
				"description": "**Step 1: Authorize Payment & Tokenize Card**\n\nAuthorizes a payment and stores the payment method for future recurring payments.\n\n**Parameters:**\n- `fullName`: Cardholder name (used for reference generation)\n- `authAmount`: Authorization amount in minor units (10000 = 100.00 EUR)\n- `cardNumber`: 16-digit card number\n- `cvc`: 3-4 digit security code\n- `expiryMonth`: MM format\n- `expiryYear`: YYYY format\n\n**Success Response:**\n- `resultCode`: \"Authorised\"\n- `pspReference`: Payment reference for capture/refund\n- `additionalData.recurring.recurringDetailReference`: Token for recurring payments\n\n**Test Cards:**\n- Success: 4111111111111111\n- Insufficient Funds: 4000000000000002\n- Invalid Card: 4000000000000101"
			},
			"response": []
		},
		{
			"name": "2. Capture Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract capture reference from response",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.success && responseJson.data && responseJson.data.pspReference) {",
							"        pm.collectionVariables.set('capture_reference', responseJson.data.pspReference);",
							"        console.log('‚úÖ Capture successful! Reference:', responseJson.data.pspReference);",
							"        console.log('üí∞ Ready for refund operations.');",
							"    }",
							"} else {",
							"    console.log('‚ùå Capture failed. Check that authorization was successful and capture amount is valid.');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Validate that we have PSP reference from authorization",
							"const pspRef = pm.collectionVariables.get('psp_reference');",
							"if (!pspRef) {",
							"    console.log('‚ùå Missing PSP Reference. Please run Step 1 (Authorization) first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pspReference\": \"{{psp_reference}}\",\n    \"reference\": \"{{payment_reference}}\",\n    \"captureAmount\": {{capture_amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{flask_base_url}}/api/capture",
					"host": [
						"{{flask_base_url}}"
					],
					"path": [
						"api",
						"capture"
					]
				},
				"description": "**Step 2: Capture Payment**\n\nCaptures funds from an authorized payment. The capture amount cannot exceed the original authorization amount.\n\n**Parameters:**\n- `pspReference`: Reference from Step 1 authorization (auto-populated)\n- `reference`: Payment reference from Step 1 (auto-populated)\n- `captureAmount`: Amount to capture in minor units (5000 = 50.00 EUR)\n\n**Success Response:**\n- `status`: \"received\"\n- `pspReference`: Capture reference for potential refunds\n\n**Common Errors:**\n- Amount exceeds authorization: Try amount > original auth amount\n- Invalid PSP reference: Ensure Step 1 was completed successfully"
			},
			"response": []
		},
		{
			"name": "3. Refund Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Log refund result",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.success && responseJson.data && responseJson.data.status === 'received') {",
							"        console.log('‚úÖ Refund request submitted successfully!');",
							"        console.log('üìù Reference:', responseJson.data.pspReference);",
							"        console.log('‚è≥ Refund will be processed during settlement (24-48 hours).');",
							"    }",
							"} else {",
							"    console.log('‚ùå Refund failed. Check that capture was successful and refund amount is valid.');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Validate that we have required references",
							"const pspRef = pm.collectionVariables.get('psp_reference');",
							"if (!pspRef) {",
							"    console.log('‚ùå Missing PSP Reference. Please run Step 1 (Authorization) first.');",
							"}",
							"",
							"const captureRef = pm.collectionVariables.get('capture_reference');",
							"if (!captureRef) {",
							"    console.log('‚ö†Ô∏è  No capture reference found. Run Step 2 (Capture) first for best results.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pspReference\": \"{{psp_reference}}\",\n    \"reference\": \"{{payment_reference}}\",\n    \"refundAmount\": {{refund_amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{flask_base_url}}/api/refund",
					"host": [
						"{{flask_base_url}}"
					],
					"path": [
						"api",
						"refund"
					]
				},
				"description": "**Step 3: Refund Payment**\n\nRefunds a captured payment. Note that Adyen processes refunds asynchronously - validation occurs during settlement, not at request time.\n\n**Parameters:**\n- `pspReference`: Original payment reference from Step 1 (auto-populated)\n- `reference`: Payment reference from Step 1 (auto-populated)\n- `refundAmount`: Amount to refund in minor units (5000 = 50.00 EUR)\n\n**Success Response:**\n- `status`: \"received\" (queued for processing)\n- `pspReference`: Refund reference for tracking\n\n**Important Notes:**\n- Refunds are processed asynchronously (24-48 hours)\n- Validation happens during settlement, not at API level\n- Excessive refund amounts will fail during settlement\n\n**Test Scenarios:**\n- Normal refund: Use amount ‚â§ captured amount\n- Excessive refund: Use amount > captured amount (will be accepted but fail at settlement)\n- Invalid amount: Use extremely large numbers or negative amounts"
			},
			"response": []
		},
		{
			"name": "4. Recurring Payment with Stored Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Log recurring payment result",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    ",
							"    if (responseJson.success && responseJson.data && responseJson.data.resultCode === 'Authorised') {",
							"        console.log('üéâ Recurring payment successful!');",
							"        console.log('üìù Payment Reference:', responseJson.data.pspReference);",
							"        console.log('‚úÖ Payment flow complete - all 4 steps executed successfully!');",
							"    }",
							"} else {",
							"    console.log('‚ùå Recurring payment failed. Check stored token and amount parameters.');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Validate that we have recurring detail reference from authorization",
							"const recurringRef = pm.collectionVariables.get('recurring_detail_reference');",
							"if (!recurringRef) {",
							"    console.log('‚ùå Missing Recurring Detail Reference. Please run Step 1 (Authorization) with tokenization first.');",
							"}",
							"",
							"const shopperRef = pm.collectionVariables.get('shopper_reference');",
							"if (!shopperRef) {",
							"    console.log('‚ùå Missing Shopper Reference. Please run Step 1 (Authorization) first.');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"recurringDetailReference\": \"{{recurring_detail_reference}}\",\n    \"shopperReference\": \"{{shopper_reference}}\",\n    \"reference\": \"{{payment_reference}}\",\n    \"recurringAmount\": {{recurring_amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{flask_base_url}}/api/recurring",
					"host": [
						"{{flask_base_url}}"
					],
					"path": [
						"api",
						"recurring"
					]
				},
				"description": "**Step 4: Recurring Payment with Stored Token**\n\nProcesses a payment using the stored payment method from Step 1. Uses the Subscription model which doesn't require CVC.\n\n**Parameters:**\n- `recurringDetailReference`: Token from Step 1 authorization (auto-populated)\n- `shopperReference`: Shopper reference from Step 1 (auto-populated)\n- `reference`: Same payment reference from Step 1 (auto-populated)\n- `recurringAmount`: Amount for recurring payment in minor units (5000 = 50.00 EUR)\n\n**Success Response:**\n- `resultCode`: \"Authorised\"\n- `pspReference`: New payment reference for this recurring transaction\n\n**Key Features:**\n- Uses stored payment method (no card details required)\n- Independent amount (not limited by original authorization)\n- Subscription processing model (no CVC required)\n- Same reference as original payment per Adyen requirements\n\n**Common Errors:**\n- Invalid recurring detail reference: Ensure Step 1 completed successfully\n- Token not found: Check that tokenization was enabled in Step 1"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "collection-prerequest",
				"exec": [
					"// Generate timestamp-based references if not set",
					"const timestamp = Date.now();",
					"",
					"// Set dynamic references if they don't exist",
					"if (!pm.collectionVariables.get('payment_reference')) {",
					"    const name = pm.collectionVariables.get('cardholder_name').replace(/\\s+/g, '_');",
					"    pm.collectionVariables.set('payment_reference', `${name}_${timestamp}`);",
					"}",
					"",
					"if (!pm.collectionVariables.get('shopper_reference')) {",
					"    pm.collectionVariables.set('shopper_reference', `shopper_${timestamp}`);",
					"}",
					"",
					"// Log current request info",
					"console.log('üöÄ Adyen Payment Flow Demo - Request:', pm.info.requestName);",
					"console.log('üìù Payment Reference:', pm.collectionVariables.get('payment_reference'));"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "collection-test",
				"exec": [
					"// Global response logging",
					"console.log('üìä Response Status:', pm.response.status, pm.response.code);",
					"",
					"// Log any errors",
					"if (pm.response.code >= 400) {",
					"    try {",
					"        const errorResponse = pm.response.json();",
					"        console.log('‚ùå Error Response:', JSON.stringify(errorResponse, null, 2));",
					"    } catch (e) {",
					"        console.log('‚ùå Error Response (raw):', pm.response.text());",
					"    }",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "flask_base_url",
			"value": "http://localhost:8000",
			"description": "Base URL for the Flask application (default: http://localhost:8000)"
		},
		{
			"key": "cardholder_name",
			"value": "John Smith",
			"description": "Cardholder name for payment reference generation"
		},
		{
			"key": "auth_amount",
			"value": "10000",
			"description": "Authorization amount in minor units (10000 = 100.00 EUR)"
		},
		{
			"key": "card_number",
			"value": "4111111111111111",
			"description": "Test card number (Visa success card)"
		},
		{
			"key": "cvc",
			"value": "737",
			"description": "Card CVC/CVV code"
		},
		{
			"key": "expiry_month",
			"value": "03",
			"description": "Card expiry month (MM format)"
		},
		{
			"key": "expiry_year",
			"value": "2030",
			"description": "Card expiry year (YYYY format)"
		},
		{
			"key": "capture_amount",
			"value": "5000",
			"description": "Capture amount in minor units (5000 = 50.00 EUR)"
		},
		{
			"key": "refund_amount",
			"value": "5000",
			"description": "Refund amount in minor units (5000 = 50.00 EUR)"
		},
		{
			"key": "recurring_amount",
			"value": "5000",
			"description": "Recurring payment amount in minor units (5000 = 50.00 EUR)"
		},
		{
			"key": "psp_reference",
			"value": "",
			"description": "PSP Reference from authorization (auto-populated)"
		},
		{
			"key": "recurring_detail_reference",
			"value": "",
			"description": "Recurring detail reference for stored payment method (auto-populated)"
		},
		{
			"key": "shopper_reference",
			"value": "",
			"description": "Shopper reference for tokenization (auto-populated)"
		},
		{
			"key": "payment_reference",
			"value": "",
			"description": "Payment reference for tracking (auto-populated)"
		},
		{
			"key": "capture_reference",
			"value": "",
			"description": "Capture reference (auto-populated after capture)"
		}
	]
}